#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Deploying Vercel build to Cloudflare Workers...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Vercel —Å–±–æ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync('.vercel/output')) {
  console.log('‚ùå Vercel build not found. Running build first...');
  try {
    execSync('pnpm build', { stdio: 'inherit' });
  } catch (error) {
    console.error('‚ùå Build failed:', error.message);
    process.exit(1);
  }
}

// –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ Vercel —Å–±–æ—Ä–∫–∏ –≤ public
console.log('üìÅ Copying static files from Vercel build...');
const staticDir = '.vercel/output/static';
const publicDir = 'public';

if (fs.existsSync(staticDir)) {
  // –°–æ–∑–¥–∞–µ–º public –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }

  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É _next –∏–∑ public, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
  if (fs.existsSync(`${publicDir}/_next`)) {
    execSync(`rm -rf ${publicDir}/_next`, { stdio: 'inherit' });
    console.log('üóëÔ∏è  Removed existing _next folder from public');
  }

  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ Vercel —Å–±–æ—Ä–∫–∏
  try {
    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    execSync(`cp -r ${staticDir}/* ${publicDir}/`, { stdio: 'inherit' });
    console.log('‚úÖ Static files copied successfully');
  } catch (error) {
    console.log('‚ö†Ô∏è  Some files may not have been copied, but continuing...');
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ _worker.js
if (!fs.existsSync('_worker.js')) {
  console.log('‚ö†Ô∏è  _worker.js not found, but continuing with deployment...');
}

// –î–µ–ø–ª–æ–π –Ω–∞ Cloudflare
console.log('üåê Deploying to Cloudflare Workers...');
try {
  execSync('wrangler deploy --env production', { stdio: 'inherit' });
  console.log('‚úÖ Deployment completed successfully!');
} catch (error) {
  console.error('‚ùå Deployment failed:', error.message);
  process.exit(1);
}
