/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation RequestLogin($input: RequestLoginInput!) {\n    requestLogin(input: $input)\n  }\n": typeof types.RequestLoginDocument,
    "\n  mutation VerifyLogin($input: VerifyLoginInput!) {\n    verifyLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": typeof types.VerifyLoginDocument,
    "\n  mutation RefreshToken($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": typeof types.RefreshTokenDocument,
    "\n  mutation Logout {\n    logout\n  }\n": typeof types.LogoutDocument,
    "\n  mutation TestLogin($input: RequestLoginInput!) {\n    testLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": typeof types.TestLoginDocument,
    "\n  mutation BookSlot($input: BookSlotInput!) {\n    bookSlot(input: $input)\n  }\n": typeof types.BookSlotDocument,
    "\n  mutation RebookSlot($input: RebookSlotInput!) {\n    rebookSlot(input: $input)\n  }\n": typeof types.RebookSlotDocument,
    "\n  mutation BurnBooking($id: UUID!) {\n    burnBooking(id: $id)\n  }\n": typeof types.BurnBookingDocument,
    "\n  mutation ApproveBooking($id: UUID!, $hat: UserHat!) {\n    approveBooking(id: $id, hat: $hat)\n  }\n": typeof types.ApproveBookingDocument,
    "\n  mutation CompleteBooking($id: UUID!, $hat: UserHat!) {\n    completeBooking(id: $id, hat: $hat)\n  }\n": typeof types.CompleteBookingDocument,
    "\n  mutation CreateCalendar($input: CreateCalendarInput!) {\n    createCalendar(input: $input)\n  }\n": typeof types.CreateCalendarDocument,
    "\n  mutation UpdateCalendar($input: UpdateCalendarInput!) {\n    updateCalendar(input: $input)\n  }\n": typeof types.UpdateCalendarDocument,
    "\n  mutation AddChat($input: AddChatInput!) {\n    addChat(input: $input)\n  }\n": typeof types.AddChatDocument,
    "\n  mutation PushMessage($input: MessageInput) {\n    pushMessage(input: $input)\n  }\n": typeof types.PushMessageDocument,
    "\n  mutation AckMessages($hat: UserHat) {\n    ackMessages(hat: $hat)\n  }\n": typeof types.AckMessagesDocument,
    "\n  mutation CreateService($input: CreateServiceInput!) {\n    createService(input: $input)\n  }\n": typeof types.CreateServiceDocument,
    "\n  mutation UpdateService($input: UpdateServiceInput!) {\n    updateService(input: $input)\n  }\n": typeof types.UpdateServiceDocument,
    "\n  mutation UpscaleToSpecialist($input: CreateSpecialistInput!) {\n    upscaleToSpecialist(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": typeof types.UpscaleToSpecialistDocument,
    "\n  mutation UpdateSpecialist($input: UpdateSpecialistInput!) {\n    updateSpecialist(input: $input) {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n": typeof types.UpdateSpecialistDocument,
    "\n  mutation LikeSpecialist($id: UUID!) {\n    like(id: $id)\n  }\n": typeof types.LikeSpecialistDocument,
    "\n  mutation DislikeSpecialist($id: UUID!) {\n    dislike(id: $id)\n  }\n": typeof types.DislikeSpecialistDocument,
    "\n  mutation UpdateUser($input: UpdateUserInput) {\n    updateUser(input: $input)\n  }\n": typeof types.UpdateUserDocument,
    "\n  mutation PushPersonalityTest($input: PersonalityTestInput) {\n    pushPersonalityTest(input: $input)\n  }\n": typeof types.PushPersonalityTestDocument,
    "\n  query GetMe {\n    me {\n      id\n      email\n      bio\n      name\n      location\n      avatar\n      timezone\n      createdAt\n      preferences {\n        language\n      }\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      specialistProfile {\n        id\n        name\n        title\n        avatar\n        practices\n        location\n        description\n        specialties\n        education {\n          id\n          title\n          description\n          certificate\n        }\n        certificates {\n          id\n          title\n          description\n          certificate\n        }\n        experience {\n          id\n          description\n        }\n        services {\n          id\n          title\n          location\n          description\n          contents\n          images\n          includes\n          tags\n          settings {\n            video {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n            inPerson {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n          }\n          createdAt\n          updatedAt\n        }\n        skills\n        likes\n        isLiked\n        rate5\n      }\n      isSpecialist\n      hat\n      tier\n      practice\n    }\n  }\n": typeof types.GetMeDocument,
    "\n  query GetUser($id: UUID!) {\n    user(id: $id) {\n      id\n      email\n      bio\n      name\n      location\n      avatar\n      timezone\n      createdAt\n      preferences {\n        language\n      }\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      specialistProfile {\n        id\n        name\n        title\n        avatar\n        practices\n        location\n        description\n        specialties\n        education {\n          id\n          title\n          description\n          certificate\n        }\n        certificates {\n          id\n          title\n          description\n          certificate\n        }\n        experience {\n          id\n          description\n        }\n        services {\n          id\n          title\n          location\n          description\n          contents\n          images\n          includes\n          tags\n          settings {\n            video {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n            inPerson {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n          }\n          createdAt\n          updatedAt\n        }\n        skills\n        likes\n        isLiked\n        rate5\n      }\n      isSpecialist\n      hat\n      tier\n      practice\n    }\n  }\n": typeof types.GetUserDocument,
    "\n  query GetCalendar($hat: UserHat!) {\n    calendar(hat: $hat) {\n      calendarRestrictions {\n        id\n        gmt\n        commons {\n          Mon {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Tue {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Wed {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Thu {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Fri {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sat {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sun {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n        }\n        restrictions {\n          id\n          date\n          isActive\n          intervals {\n            start\n            end\n            formats\n          }\n          isPractice\n        }\n        location\n      }\n      bookings {\n        id\n        date\n        duration\n        format\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        price\n      }\n    }\n  }\n": typeof types.GetCalendarDocument,
    "\n  query GetDashboard {\n    dashboard {\n      hat\n      upcomingActivities {\n        id\n        startTime\n        endTime\n        date\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        duration\n        format\n        price\n        service {\n          id\n          title\n          description\n        }\n        specialist {\n          id\n          name\n          avatar\n        }\n        user {\n          id\n          name\n          avatar\n        }\n        practiceCount\n      }\n    }\n  }\n": typeof types.GetDashboardDocument,
    "\n  query GetService($id: UUID!) {\n    service(id: $id) {\n      id\n      title\n      location\n      description\n      contents\n      images\n      includes\n      specialist {\n        id\n        name\n        title\n        avatar\n      }\n      settings {\n        video {\n          practices {\n            slots\n            duration\n            price\n          }\n          score\n          enabled\n        }\n        inPerson {\n          practices {\n            slots\n            duration\n            price\n          }\n          score\n          enabled\n        }\n      }\n      tags\n      reviews {\n        id\n        author\n        avatar\n        comment\n        createdAt\n      }\n      bookings {\n        id\n        date\n        duration\n        format\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        price\n      }\n      calendarRestrictions {\n        id\n        gmt\n        commons {\n          Mon {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Tue {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Wed {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Thu {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Fri {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sat {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sun {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n        }\n        restrictions {\n          id\n          date\n          isActive\n          intervals {\n            start\n            end\n            formats\n          }\n          isPractice\n        }\n        location\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetServiceDocument,
    "\n  query GetSpecialist($id: UUID!) {\n    specialist(id: $id) {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n": typeof types.GetSpecialistDocument,
    "\n  query GetLikedSpecialists {\n    likedSpecialists {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n": typeof types.GetLikedSpecialistsDocument,
};
const documents: Documents = {
    "\n  mutation RequestLogin($input: RequestLoginInput!) {\n    requestLogin(input: $input)\n  }\n": types.RequestLoginDocument,
    "\n  mutation VerifyLogin($input: VerifyLoginInput!) {\n    verifyLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": types.VerifyLoginDocument,
    "\n  mutation RefreshToken($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": types.RefreshTokenDocument,
    "\n  mutation Logout {\n    logout\n  }\n": types.LogoutDocument,
    "\n  mutation TestLogin($input: RequestLoginInput!) {\n    testLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": types.TestLoginDocument,
    "\n  mutation BookSlot($input: BookSlotInput!) {\n    bookSlot(input: $input)\n  }\n": types.BookSlotDocument,
    "\n  mutation RebookSlot($input: RebookSlotInput!) {\n    rebookSlot(input: $input)\n  }\n": types.RebookSlotDocument,
    "\n  mutation BurnBooking($id: UUID!) {\n    burnBooking(id: $id)\n  }\n": types.BurnBookingDocument,
    "\n  mutation ApproveBooking($id: UUID!, $hat: UserHat!) {\n    approveBooking(id: $id, hat: $hat)\n  }\n": types.ApproveBookingDocument,
    "\n  mutation CompleteBooking($id: UUID!, $hat: UserHat!) {\n    completeBooking(id: $id, hat: $hat)\n  }\n": types.CompleteBookingDocument,
    "\n  mutation CreateCalendar($input: CreateCalendarInput!) {\n    createCalendar(input: $input)\n  }\n": types.CreateCalendarDocument,
    "\n  mutation UpdateCalendar($input: UpdateCalendarInput!) {\n    updateCalendar(input: $input)\n  }\n": types.UpdateCalendarDocument,
    "\n  mutation AddChat($input: AddChatInput!) {\n    addChat(input: $input)\n  }\n": types.AddChatDocument,
    "\n  mutation PushMessage($input: MessageInput) {\n    pushMessage(input: $input)\n  }\n": types.PushMessageDocument,
    "\n  mutation AckMessages($hat: UserHat) {\n    ackMessages(hat: $hat)\n  }\n": types.AckMessagesDocument,
    "\n  mutation CreateService($input: CreateServiceInput!) {\n    createService(input: $input)\n  }\n": types.CreateServiceDocument,
    "\n  mutation UpdateService($input: UpdateServiceInput!) {\n    updateService(input: $input)\n  }\n": types.UpdateServiceDocument,
    "\n  mutation UpscaleToSpecialist($input: CreateSpecialistInput!) {\n    upscaleToSpecialist(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": types.UpscaleToSpecialistDocument,
    "\n  mutation UpdateSpecialist($input: UpdateSpecialistInput!) {\n    updateSpecialist(input: $input) {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n": types.UpdateSpecialistDocument,
    "\n  mutation LikeSpecialist($id: UUID!) {\n    like(id: $id)\n  }\n": types.LikeSpecialistDocument,
    "\n  mutation DislikeSpecialist($id: UUID!) {\n    dislike(id: $id)\n  }\n": types.DislikeSpecialistDocument,
    "\n  mutation UpdateUser($input: UpdateUserInput) {\n    updateUser(input: $input)\n  }\n": types.UpdateUserDocument,
    "\n  mutation PushPersonalityTest($input: PersonalityTestInput) {\n    pushPersonalityTest(input: $input)\n  }\n": types.PushPersonalityTestDocument,
    "\n  query GetMe {\n    me {\n      id\n      email\n      bio\n      name\n      location\n      avatar\n      timezone\n      createdAt\n      preferences {\n        language\n      }\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      specialistProfile {\n        id\n        name\n        title\n        avatar\n        practices\n        location\n        description\n        specialties\n        education {\n          id\n          title\n          description\n          certificate\n        }\n        certificates {\n          id\n          title\n          description\n          certificate\n        }\n        experience {\n          id\n          description\n        }\n        services {\n          id\n          title\n          location\n          description\n          contents\n          images\n          includes\n          tags\n          settings {\n            video {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n            inPerson {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n          }\n          createdAt\n          updatedAt\n        }\n        skills\n        likes\n        isLiked\n        rate5\n      }\n      isSpecialist\n      hat\n      tier\n      practice\n    }\n  }\n": types.GetMeDocument,
    "\n  query GetUser($id: UUID!) {\n    user(id: $id) {\n      id\n      email\n      bio\n      name\n      location\n      avatar\n      timezone\n      createdAt\n      preferences {\n        language\n      }\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      specialistProfile {\n        id\n        name\n        title\n        avatar\n        practices\n        location\n        description\n        specialties\n        education {\n          id\n          title\n          description\n          certificate\n        }\n        certificates {\n          id\n          title\n          description\n          certificate\n        }\n        experience {\n          id\n          description\n        }\n        services {\n          id\n          title\n          location\n          description\n          contents\n          images\n          includes\n          tags\n          settings {\n            video {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n            inPerson {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n          }\n          createdAt\n          updatedAt\n        }\n        skills\n        likes\n        isLiked\n        rate5\n      }\n      isSpecialist\n      hat\n      tier\n      practice\n    }\n  }\n": types.GetUserDocument,
    "\n  query GetCalendar($hat: UserHat!) {\n    calendar(hat: $hat) {\n      calendarRestrictions {\n        id\n        gmt\n        commons {\n          Mon {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Tue {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Wed {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Thu {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Fri {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sat {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sun {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n        }\n        restrictions {\n          id\n          date\n          isActive\n          intervals {\n            start\n            end\n            formats\n          }\n          isPractice\n        }\n        location\n      }\n      bookings {\n        id\n        date\n        duration\n        format\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        price\n      }\n    }\n  }\n": types.GetCalendarDocument,
    "\n  query GetDashboard {\n    dashboard {\n      hat\n      upcomingActivities {\n        id\n        startTime\n        endTime\n        date\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        duration\n        format\n        price\n        service {\n          id\n          title\n          description\n        }\n        specialist {\n          id\n          name\n          avatar\n        }\n        user {\n          id\n          name\n          avatar\n        }\n        practiceCount\n      }\n    }\n  }\n": types.GetDashboardDocument,
    "\n  query GetService($id: UUID!) {\n    service(id: $id) {\n      id\n      title\n      location\n      description\n      contents\n      images\n      includes\n      specialist {\n        id\n        name\n        title\n        avatar\n      }\n      settings {\n        video {\n          practices {\n            slots\n            duration\n            price\n          }\n          score\n          enabled\n        }\n        inPerson {\n          practices {\n            slots\n            duration\n            price\n          }\n          score\n          enabled\n        }\n      }\n      tags\n      reviews {\n        id\n        author\n        avatar\n        comment\n        createdAt\n      }\n      bookings {\n        id\n        date\n        duration\n        format\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        price\n      }\n      calendarRestrictions {\n        id\n        gmt\n        commons {\n          Mon {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Tue {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Wed {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Thu {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Fri {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sat {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sun {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n        }\n        restrictions {\n          id\n          date\n          isActive\n          intervals {\n            start\n            end\n            formats\n          }\n          isPractice\n        }\n        location\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetServiceDocument,
    "\n  query GetSpecialist($id: UUID!) {\n    specialist(id: $id) {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n": types.GetSpecialistDocument,
    "\n  query GetLikedSpecialists {\n    likedSpecialists {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n": types.GetLikedSpecialistsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RequestLogin($input: RequestLoginInput!) {\n    requestLogin(input: $input)\n  }\n"): (typeof documents)["\n  mutation RequestLogin($input: RequestLoginInput!) {\n    requestLogin(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyLogin($input: VerifyLoginInput!) {\n    verifyLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyLogin($input: VerifyLoginInput!) {\n    verifyLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RefreshToken($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshToken($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Logout {\n    logout\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation TestLogin($input: RequestLoginInput!) {\n    testLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation TestLogin($input: RequestLoginInput!) {\n    testLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation BookSlot($input: BookSlotInput!) {\n    bookSlot(input: $input)\n  }\n"): (typeof documents)["\n  mutation BookSlot($input: BookSlotInput!) {\n    bookSlot(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RebookSlot($input: RebookSlotInput!) {\n    rebookSlot(input: $input)\n  }\n"): (typeof documents)["\n  mutation RebookSlot($input: RebookSlotInput!) {\n    rebookSlot(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation BurnBooking($id: UUID!) {\n    burnBooking(id: $id)\n  }\n"): (typeof documents)["\n  mutation BurnBooking($id: UUID!) {\n    burnBooking(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ApproveBooking($id: UUID!, $hat: UserHat!) {\n    approveBooking(id: $id, hat: $hat)\n  }\n"): (typeof documents)["\n  mutation ApproveBooking($id: UUID!, $hat: UserHat!) {\n    approveBooking(id: $id, hat: $hat)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CompleteBooking($id: UUID!, $hat: UserHat!) {\n    completeBooking(id: $id, hat: $hat)\n  }\n"): (typeof documents)["\n  mutation CompleteBooking($id: UUID!, $hat: UserHat!) {\n    completeBooking(id: $id, hat: $hat)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateCalendar($input: CreateCalendarInput!) {\n    createCalendar(input: $input)\n  }\n"): (typeof documents)["\n  mutation CreateCalendar($input: CreateCalendarInput!) {\n    createCalendar(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateCalendar($input: UpdateCalendarInput!) {\n    updateCalendar(input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateCalendar($input: UpdateCalendarInput!) {\n    updateCalendar(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddChat($input: AddChatInput!) {\n    addChat(input: $input)\n  }\n"): (typeof documents)["\n  mutation AddChat($input: AddChatInput!) {\n    addChat(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PushMessage($input: MessageInput) {\n    pushMessage(input: $input)\n  }\n"): (typeof documents)["\n  mutation PushMessage($input: MessageInput) {\n    pushMessage(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AckMessages($hat: UserHat) {\n    ackMessages(hat: $hat)\n  }\n"): (typeof documents)["\n  mutation AckMessages($hat: UserHat) {\n    ackMessages(hat: $hat)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateService($input: CreateServiceInput!) {\n    createService(input: $input)\n  }\n"): (typeof documents)["\n  mutation CreateService($input: CreateServiceInput!) {\n    createService(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateService($input: UpdateServiceInput!) {\n    updateService(input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateService($input: UpdateServiceInput!) {\n    updateService(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpscaleToSpecialist($input: CreateSpecialistInput!) {\n    upscaleToSpecialist(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation UpscaleToSpecialist($input: CreateSpecialistInput!) {\n    upscaleToSpecialist(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateSpecialist($input: UpdateSpecialistInput!) {\n    updateSpecialist(input: $input) {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSpecialist($input: UpdateSpecialistInput!) {\n    updateSpecialist(input: $input) {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation LikeSpecialist($id: UUID!) {\n    like(id: $id)\n  }\n"): (typeof documents)["\n  mutation LikeSpecialist($id: UUID!) {\n    like(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DislikeSpecialist($id: UUID!) {\n    dislike(id: $id)\n  }\n"): (typeof documents)["\n  mutation DislikeSpecialist($id: UUID!) {\n    dislike(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUser($input: UpdateUserInput) {\n    updateUser(input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateUser($input: UpdateUserInput) {\n    updateUser(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PushPersonalityTest($input: PersonalityTestInput) {\n    pushPersonalityTest(input: $input)\n  }\n"): (typeof documents)["\n  mutation PushPersonalityTest($input: PersonalityTestInput) {\n    pushPersonalityTest(input: $input)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMe {\n    me {\n      id\n      email\n      bio\n      name\n      location\n      avatar\n      timezone\n      createdAt\n      preferences {\n        language\n      }\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      specialistProfile {\n        id\n        name\n        title\n        avatar\n        practices\n        location\n        description\n        specialties\n        education {\n          id\n          title\n          description\n          certificate\n        }\n        certificates {\n          id\n          title\n          description\n          certificate\n        }\n        experience {\n          id\n          description\n        }\n        services {\n          id\n          title\n          location\n          description\n          contents\n          images\n          includes\n          tags\n          settings {\n            video {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n            inPerson {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n          }\n          createdAt\n          updatedAt\n        }\n        skills\n        likes\n        isLiked\n        rate5\n      }\n      isSpecialist\n      hat\n      tier\n      practice\n    }\n  }\n"): (typeof documents)["\n  query GetMe {\n    me {\n      id\n      email\n      bio\n      name\n      location\n      avatar\n      timezone\n      createdAt\n      preferences {\n        language\n      }\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      specialistProfile {\n        id\n        name\n        title\n        avatar\n        practices\n        location\n        description\n        specialties\n        education {\n          id\n          title\n          description\n          certificate\n        }\n        certificates {\n          id\n          title\n          description\n          certificate\n        }\n        experience {\n          id\n          description\n        }\n        services {\n          id\n          title\n          location\n          description\n          contents\n          images\n          includes\n          tags\n          settings {\n            video {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n            inPerson {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n          }\n          createdAt\n          updatedAt\n        }\n        skills\n        likes\n        isLiked\n        rate5\n      }\n      isSpecialist\n      hat\n      tier\n      practice\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUser($id: UUID!) {\n    user(id: $id) {\n      id\n      email\n      bio\n      name\n      location\n      avatar\n      timezone\n      createdAt\n      preferences {\n        language\n      }\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      specialistProfile {\n        id\n        name\n        title\n        avatar\n        practices\n        location\n        description\n        specialties\n        education {\n          id\n          title\n          description\n          certificate\n        }\n        certificates {\n          id\n          title\n          description\n          certificate\n        }\n        experience {\n          id\n          description\n        }\n        services {\n          id\n          title\n          location\n          description\n          contents\n          images\n          includes\n          tags\n          settings {\n            video {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n            inPerson {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n          }\n          createdAt\n          updatedAt\n        }\n        skills\n        likes\n        isLiked\n        rate5\n      }\n      isSpecialist\n      hat\n      tier\n      practice\n    }\n  }\n"): (typeof documents)["\n  query GetUser($id: UUID!) {\n    user(id: $id) {\n      id\n      email\n      bio\n      name\n      location\n      avatar\n      timezone\n      createdAt\n      preferences {\n        language\n      }\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      specialistProfile {\n        id\n        name\n        title\n        avatar\n        practices\n        location\n        description\n        specialties\n        education {\n          id\n          title\n          description\n          certificate\n        }\n        certificates {\n          id\n          title\n          description\n          certificate\n        }\n        experience {\n          id\n          description\n        }\n        services {\n          id\n          title\n          location\n          description\n          contents\n          images\n          includes\n          tags\n          settings {\n            video {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n            inPerson {\n              practices {\n                slots\n                duration\n                price\n              }\n              score\n              enabled\n            }\n          }\n          createdAt\n          updatedAt\n        }\n        skills\n        likes\n        isLiked\n        rate5\n      }\n      isSpecialist\n      hat\n      tier\n      practice\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCalendar($hat: UserHat!) {\n    calendar(hat: $hat) {\n      calendarRestrictions {\n        id\n        gmt\n        commons {\n          Mon {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Tue {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Wed {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Thu {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Fri {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sat {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sun {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n        }\n        restrictions {\n          id\n          date\n          isActive\n          intervals {\n            start\n            end\n            formats\n          }\n          isPractice\n        }\n        location\n      }\n      bookings {\n        id\n        date\n        duration\n        format\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        price\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCalendar($hat: UserHat!) {\n    calendar(hat: $hat) {\n      calendarRestrictions {\n        id\n        gmt\n        commons {\n          Mon {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Tue {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Wed {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Thu {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Fri {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sat {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sun {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n        }\n        restrictions {\n          id\n          date\n          isActive\n          intervals {\n            start\n            end\n            formats\n          }\n          isPractice\n        }\n        location\n      }\n      bookings {\n        id\n        date\n        duration\n        format\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        price\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDashboard {\n    dashboard {\n      hat\n      upcomingActivities {\n        id\n        startTime\n        endTime\n        date\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        duration\n        format\n        price\n        service {\n          id\n          title\n          description\n        }\n        specialist {\n          id\n          name\n          avatar\n        }\n        user {\n          id\n          name\n          avatar\n        }\n        practiceCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDashboard {\n    dashboard {\n      hat\n      upcomingActivities {\n        id\n        startTime\n        endTime\n        date\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        duration\n        format\n        price\n        service {\n          id\n          title\n          description\n        }\n        specialist {\n          id\n          name\n          avatar\n        }\n        user {\n          id\n          name\n          avatar\n        }\n        practiceCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetService($id: UUID!) {\n    service(id: $id) {\n      id\n      title\n      location\n      description\n      contents\n      images\n      includes\n      specialist {\n        id\n        name\n        title\n        avatar\n      }\n      settings {\n        video {\n          practices {\n            slots\n            duration\n            price\n          }\n          score\n          enabled\n        }\n        inPerson {\n          practices {\n            slots\n            duration\n            price\n          }\n          score\n          enabled\n        }\n      }\n      tags\n      reviews {\n        id\n        author\n        avatar\n        comment\n        createdAt\n      }\n      bookings {\n        id\n        date\n        duration\n        format\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        price\n      }\n      calendarRestrictions {\n        id\n        gmt\n        commons {\n          Mon {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Tue {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Wed {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Thu {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Fri {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sat {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sun {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n        }\n        restrictions {\n          id\n          date\n          isActive\n          intervals {\n            start\n            end\n            formats\n          }\n          isPractice\n        }\n        location\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetService($id: UUID!) {\n    service(id: $id) {\n      id\n      title\n      location\n      description\n      contents\n      images\n      includes\n      specialist {\n        id\n        name\n        title\n        avatar\n      }\n      settings {\n        video {\n          practices {\n            slots\n            duration\n            price\n          }\n          score\n          enabled\n        }\n        inPerson {\n          practices {\n            slots\n            duration\n            price\n          }\n          score\n          enabled\n        }\n      }\n      tags\n      reviews {\n        id\n        author\n        avatar\n        comment\n        createdAt\n      }\n      bookings {\n        id\n        date\n        duration\n        format\n        status\n        createdAt\n        updatedAt\n        isRepeat\n        price\n      }\n      calendarRestrictions {\n        id\n        gmt\n        commons {\n          Mon {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Tue {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Wed {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Thu {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Fri {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sat {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n          Sun {\n            id\n            date\n            isActive\n            intervals {\n              start\n              end\n              formats\n            }\n            isPractice\n          }\n        }\n        restrictions {\n          id\n          date\n          isActive\n          intervals {\n            start\n            end\n            formats\n          }\n          isPractice\n        }\n        location\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSpecialist($id: UUID!) {\n    specialist(id: $id) {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n"): (typeof documents)["\n  query GetSpecialist($id: UUID!) {\n    specialist(id: $id) {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLikedSpecialists {\n    likedSpecialists {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n"): (typeof documents)["\n  query GetLikedSpecialists {\n    likedSpecialists {\n      id\n      name\n      title\n      avatar\n      practices\n      location\n      description\n      specialties\n      education {\n        id\n        title\n        description\n        certificate\n      }\n      certificates {\n        id\n        title\n        description\n        certificate\n      }\n      experience {\n        id\n        description\n      }\n      services {\n        id\n        title\n        location\n        description\n        contents\n        images\n        includes\n        tags\n        settings {\n          video {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n          inPerson {\n            practices {\n              slots\n              duration\n              price\n            }\n            score\n            enabled\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      skills\n      likes\n      isLiked\n      rate5\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;